# -*- coding: utf-8 -*-
"""
Created on Sat Jan  8 11:08:05 2022

@author: Anika Nath
"""
import numpy as np
import xarray as xr
import glob
import matplotlib.pyplot as plt

Omega_Enceladus = 5.3e-5  # Rotation rate [1/rad]
rotation_period_Enceladus = 2*np.pi / Omega_Enceladus # [s]
num_sim = 12
sim_order = [3, 5, 9, 2, 6, 8, 1, 4, 7, 10, 11, 12]
threshold_z_arr = -1000*np.array([10,10,10,30,30,30,60,60,60,60,60,60])/2
#threshold_z = -1000
rossby_num = [1.9*10**5, 1400, 310, 4100, 6.2*10**4, 69, 410, 140, 9.8, 9.8, 69, 310]
markers = ['$\\otimes$', '$\\dagger$', '$\\triangleright$', '$\\oplus$', '$\\times$', '$\\triangleleft$', '$\\boxplus$', '$+$', '$\\circ$', '$\\bullet$', '$\\blacktriangleleft$', '$\\blacktriangleright$']
mean_times_equator = []
mean_times_poles = []

for i in range(1, num_sim + 1):
    sim = sim_order[i - 1]
    threshold_z = threshold_z_arr[sim - 1]
    
    fn = glob.glob(f"C:/Users/Anika XPS13/1st UROP/run*/icy_moon_long_channel_particles_sim{sim}.nc")
    
    ds = xr.open_mfdataset(fn, decode_times=False)
    
    particles = ds.particle_id.values
    time = ds.time.values
    
    z = ds.z.values
    
    # We first find only particles that cross the threshold and ignore all the other particles
    is_z_gt_threshold = (z > threshold_z)
    particles_cross_threshold = np.any(is_z_gt_threshold, axis=0)
    z = z[:, particles_cross_threshold]
    y = ds.y[:, particles_cross_threshold].values
    particles = particles[particles_cross_threshold]
    
    # the following ymin and ymax gives us three ranges: -400km to -100km, -100km to 100km, and 100km to 400km
    ymins, ymaxs = [-100000, 100000], [100000, 400000] # in meters
    
    colors = ['k', 'r', 'b']
    
    for ymin, ymax, c in zip(ymins, ymaxs, colors):
        is_initial_y_in_range = (y[0,:] < ymax) & (y[0,:] > ymin)
    
        z_particles_that_cross_threshold = z[:, is_initial_y_in_range]
    
        time_particles_cross_threshold_and_in_range = np.argmax(z_particles_that_cross_threshold > threshold_z, axis=0)
    
        particles_in_range = particles[is_initial_y_in_range]
        times_in_range = time[time_particles_cross_threshold_and_in_range]/rotation_period_Enceladus
        mean_transit_time = np.mean(times_in_range)
        std_transit_time = np.std(times_in_range)
        #median_transit_time = np.median(times_in_range)
    
        if ymin == -100000:
            mean_times_equator.append(mean_transit_time)
        else:
            mean_times_poles.append(mean_transit_time)

for xp, yp, m in zip(rossby_num, mean_times_equator, markers):
    # if m == '$\\otimes$':
    #     plt.scatter(xp, yp, marker=m, s=120, c='r', label = '-100 km < y < 100 km')   
    # else:
    #plt.scatter(xp, yp, marker=m, s=120, c='r')   
    plt.errorbar(xp, yp, yerr=std_transit_time, marker=m, color = 'magenta', markersize=10, ecolor='r', elinewidth = 1, capsize=6)
    #print(xp, yp, m)
        
for xp, yp, m in zip(rossby_num, mean_times_poles, markers):
    # if m == '$\\otimes$':
    #     plt.scatter(xp, yp, marker=m, s=120, c='b', label = '100 km < y < 400 km')   
    # else:
    #plt.scatter(xp, yp, marker=m, s=120, c='b')   
    plt.errorbar(xp, yp, yerr=std_transit_time, marker = m, color = 'green', markersize=10, ecolor='b', elinewidth = 1, capsize=6)

#plt.scatter(rossby_num, mean_times_equator, c='r', label = '-100 km < y < 100 km')
#plt.scatter(rossby_num, mean_times_poles, c='b', label = '100 km < y < 400 km')
plt.xscale('log')
plt.yscale('log')
plt.yticks([1, 10, 10**2, 10**3, 10**4, 10**5])
plt.xlabel('Ro* (X 10^-5)')
plt.ylabel('Mean Transit Times')
plt.title('Ro* vs. Mean Transit Times (Thres = 0.5H)')
plt.grid()
#plt.legend()
plt.savefig('rossby_num_vs_mean_transit_times_thres_0.5H_error.png', bbox_inches='tight', dpi=150)
